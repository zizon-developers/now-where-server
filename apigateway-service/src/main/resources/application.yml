server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: api-gateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: admin
    password: hwryu990927!

  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true

      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login #특정 URI를 입력하면 이 데이터 하나에 대해서만 조건을 추가
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #요청된 헤더값 삭제 POST로 전달된 데이터값은 매번 새로운 데이터처럼 인식되게 하기 위함
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users #회원가입
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #요청된 헤더값 삭제 POST로 전달된 데이터값은 매번 새로운 데이터처럼 인식되게 하기 위함
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/** #특정 URI를 입력하면 이 데이터 하나에 대해서만 조건을 추가
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie #요청된 헤더값 삭제 POST로 전달된 데이터값은 매번 새로운 데이터처럼 인식되게 하기 위함
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
            - AuthorizationHeaderFilter

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-Response, first-Response-header2
#             ???? ???? ?? ??? name ?? ????
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there
                preLogger: true
                postLogger: true
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-Response, second-Response-header2
            - CustomFilter

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh

#token:
#  secret: user_token